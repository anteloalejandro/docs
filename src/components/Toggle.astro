---
type Props = {
  hideAt?: number
}

const { hideAt = 1024 } = Astro.props
---
<toggle-btn>
  <input type="checkbox" id="trigger">
  <label for="trigger">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--! Font Awesome Pro 6.4.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. --><path d="M470.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L402.7 256 265.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l160-160zm-352 160l160-160c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L210.7 256 73.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0z"/></svg>
  </label>
</toggle-btn>

<script define:vars={{ hideAt }}>

class ToggleBtn extends HTMLElement {
  isActive = null
  checkbox = this.querySelector('input')
  content = this.querySelector('label')
  constructor(
    isActive = false,
    activeClass = 'show-panel',
    containerSelector = '.container'
  ) {
    super()

    if (isActive) {
      this.checkbox.click()
    }
    this.isActive = isActive

    const container = document.querySelector(containerSelector)
    this.content.addEventListener('click', ev => {
      // ev.preventDefault()
      this.isActive = !this.isActive

      console.log(this.isActive)

      if (this.isActive) {
        container.classList.add(activeClass)
      } else {
        container.classList.remove(activeClass)
      }

    })

    if (window.innerWidth >= hideAt) {
      this.classList.add('hidden')
    } else {
      this.classList.remove('hidden')
    }
    window.addEventListener('resize', () => {
      if (window.innerWidth >= hideAt) {
        this.classList.add('hidden')
      } else {
        this.classList.remove('hidden')
      }
    })
  }
}

customElements.define('toggle-btn', ToggleBtn)

</script>

<style lang="scss">
  toggle-btn {
    display: block;
    &.hidden {
      display: none;
    }
    & > * {
      cursor: pointer;
    }
  }

  #trigger {
    display: none;

    & + label {
      height: 100%;
      display: grid;
      place-content: stretch;
      svg {
        height: 100%;
        padding: 1rem;
        fill: white;
        transform: rotate3d(0, 1, 0, 0deg);
        transition: transform 200ms ease,
                    fill 200ms ease;
      }
    }

    &:checked + label {
      svg {
        fill: grey;
        transform: rotate3d(0, 1, 0, 180deg);
      }
    }
  }
</style>
