---
import BaseLayout from "./BaseLayout.astro";
import Reference from "../components/reference/reference.astro";
import Header from "../components/Header.astro";
import Toc from '../components/toc/toc.astro';
import NavigationBtn from "../components/NavigationBtn.astro";
import { MarkdownHeading } from "@astrojs/markdown-remark/dist/types";

type Props = {
  title?: 'en' | 'es',
  lang?: string,
  frontmatter: any,
  headings: MarkdownHeading[]
}
const { frontmatter, headings } = Astro.props

const title = frontmatter.title

const url = Astro.url.pathname.lastIndexOf('/') == Astro.url.pathname.length - 1
  ? Astro.url.pathname.substring(0, Astro.url.pathname.length - 1)
  : Astro.url.pathname

const prevUrl = url.substring(0, url.lastIndexOf('/'))
const isRoot = prevUrl == '/docs' // Get from the current url
const baseRoute = isRoot ? url : prevUrl

const unfilteredDocs = await Astro.glob('../pages/docs/**/*.md')
const filteredDocs = unfilteredDocs
  .filter(d => {
    const isDraft = d.frontmatter.draft
    const isIndex = d.file.substring(d.file.lastIndexOf('/')) == '/index.md'

    const route = isIndex ? d.url : d.url.substring(0, d.url.lastIndexOf('/'))

    return !isDraft && route == baseRoute
  })
  .sort((a, b) => {
    const orderA = a.frontmatter.order || 0
    const orderB = b.frontmatter.order || 0
    return orderA - orderB;
  })
const currentDocIdx = filteredDocs.findIndex(d => d.url == url)
const prevDoc = currentDocIdx > 0 && filteredDocs[currentDocIdx - 1]
const nextDoc = currentDocIdx < filteredDocs.length && filteredDocs[currentDocIdx + 1]
---

<BaseLayout title={title}>
  <Header/>
  <Reference docList={filteredDocs}/>
  <main>
    <slot/>
    <div class="navigation">
      {prevDoc && <NavigationBtn direction="previous" doc={prevDoc}/>}
      {nextDoc && <NavigationBtn direction="next" doc={nextDoc}/>}
    </div>
  </main>
  <Toc headings={headings}/>
</BaseLayout>

<style is:global lang="scss">
:root {
  --ref-width: 300px;
  --header-height: 4rem;
  scroll-padding-top: var(--header-height);
    body, .container {
      height: unset;
      min-height: 100vh;
    }
}
.container {
  display: grid;
  grid-template-columns: var(--ref-width) 1fr 300px;
  grid-template-rows: var(--header-height) 1fr;

  .sticky {
    position: sticky;
    top: var(--header-height);
    min-height: calc(100vh - var(--header-height));
    left: 0;
    align-self: start;
  }

  header {
    grid-row: 1/2;
    grid-column: 1/-1;
    align-self: stretch;
    position: sticky;
    top: 0;
  }
  nav.refs {
    grid-column: 1 / span 1;
    @extend .sticky;
  }
  nav.toc {
    grid-column: -2/-1;
    @extend .sticky;
  }
  main {
    grid-column: 2 / 3;
  }

  @media screen and (max-width: 1024px) {
    nav.refs {
      z-index: 50;
      position: fixed;
      bottom: 0;
      left: -100%;
      transition: left 500ms ease;
      box-shadow: -20px 0px 30px black;
      width: var(--ref-width);
    }

    main {
      grid-column-start: 1;
    }

    &.show-panel {
      nav.refs {
        left: 0;
      }
    }
  }

  @media screen and (max-width: 768px) {
    grid-template-columns: 1fr;
    grid-template-rows: var(--header-height) auto 1fr;

    nav.toc {
      position: static;
      grid-row: 2/3;
    }

    main {
      grid-row: 3/4;
    }

    header {
      position: sticky;
      top: 0;
      inset-inline: 0;
    }

  }
}

main {
  scroll-behavior: smooth;
  height: 100%;
  table {
    border-collapse: collapse;

    th {
      background-color: var(--bg-3);
    }
    td, th {
      border: 2px solid var(--fg);
      padding: .25rem;
    }
  }
}

nav.refs, main, nav.toc {
  padding: 1rem;
  overflow-y: auto;
}

.navigation {
  display: grid;
  grid-template-rows: auto;
  grid-auto-flow: column;
  justify-content: space-around;
  align-content: stretch;
  gap: 2rem;
  margin-block: 2rem;
}

nav.toc .active {
  @media (min-width: 769px) {

    background-color: var(--hl-3);
    & > a {
      background-color: var(--hl-2);
      color: var(--bg);
      .block {
        background-color: var(--hl-2);
      }
    }
    ol, & + ol {
      background-color: var(--hl-3);
    }
  }
}

</style>

<script src="../scripts/toc.ts"></script>
